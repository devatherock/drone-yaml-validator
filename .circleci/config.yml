docker_auth: &docker_auth
  auth:
    username: $DOCKER_USERNAME
    password: $DOCKER_PASSWORD

workspace: &workspace
  at: ~/drone-yaml-validator

slack_image: &slack_image
  docker:
    - image: devatherock/simple-slack:1.0.0
      <<: *docker_auth

yaml_validator_image: &yaml_validator_image
  docker:
    - image: devatherock/drone-yaml-validator:latest
      <<: *docker_auth

work_directory: &work_directory
  working_directory: ~/drone-yaml-validator

resource_class: &resource_class
  resource_class: small

release_filter: &release_filter
  filters:
    branches:
      only: non-existent-branch
    tags:
      only: /^v[0-9\.]+$/

pr_filter: &pr_filter
  filters:
    branches:
      ignore: master

parameters:
  repo_name:
    type: string
    default: "drone-yaml-validator"

executors:
  jdk-executor:
    docker:
      - image: cimg/openjdk:21.0
        <<: *docker_auth
    <<: *resource_class
    <<: *work_directory
  machine-executor:
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: medium
    <<: *work_directory
  arm-executor:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    <<: *work_directory

version: 2.1
jobs:
  changelog_updater:
    docker:
    - image: devatherock/changelog-updater:0.1.0
      <<: *docker_auth
    <<: *resource_class
    environment:
      VELA_BUILD_AUTHOR: "renovate[bot]"
      VELA_BUILD_AUTHOR_EMAIL: "29139614+renovate[bot]@users.noreply.github.com"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:86:fe:0e:c3:0e:ad:0d:1d:5c:3e:48:cf:28:39:5d"
      - checkout
      - run: sh /scripts/entry-point.sh

  test:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: |
          make test
      - store_artifacts:
          path: build/reports/jacoco
      - store_test_results:
          path: build/test-results

  build:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          make coveralls
      - store_artifacts:
          path: build/reports/jacoco
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

  groovy_script_to_jar:
    docker:
      - image: devatherock/scriptjar:2.0.0
        <<: *docker_auth
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_SCRIPT_PATH: YamlValidator.groovy
      PARAMETER_STATIC_COMPILE: true
      PARAMETER_OUTPUT_FILE: build/native/libs/YamlValidator.jar
    steps:
      - checkout
      - run: sh /scripts/entry-point.sh
      - persist_to_workspace:
          root: ~/drone-yaml-validator
          paths:
            - build

  java_to_native:
    docker:
      - image: devatherock/java-to-native:3.0.0
        <<: *docker_auth
    resource_class: medium
    <<: *work_directory
    environment:
      PLUGIN_JAR_NAME: build/native/libs/YamlValidator.jar
      PLUGIN_CONFIG_FILE: config/graal.yml
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - run: |
          sh /scripts/entry-point.sh
          upx -4 YamlValidator
      - persist_to_workspace:
          root: ~/drone-yaml-validator
          paths:
            - YamlValidator

  publish_arm:
    executor: arm-executor
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - run: |
          docker run --rm \
              -v $PWD:/work \
              -w /work \
              --entrypoint='' \
              -e PARAMETER_JAR_NAME=build/native/libs/YamlValidator.jar \
              -e PARAMETER_CONFIG_FILE=config/graal.yml \
              devatherock/java-to-native:3.0.0 sh -c "/scripts/entry-point.sh && upx -4 YamlValidator"
          TAG=${CIRCLE_SHA1:0:8}-arm64
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build \
            -t devatherock/drone-yaml-validator:$TAG \
            -t devatherock/drone-yaml-validator:arm64 .
          docker image push --all-tags devatherock/drone-yaml-validator

  publish:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          <<: *workspace
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker build \
            -t devatherock/drone-yaml-validator:$TAG \
            -t devatherock/drone-yaml-validator:latest \
            -t devatherock/drone-yaml-validator:amd64 .
          docker image push --all-tags devatherock/drone-yaml-validator

  dockerhub_readme:
    docker:
      - image: peterevans/dockerhub-description:3.4.2
        <<: *docker_auth
    <<: *resource_class
    <<: *work_directory
    environment:
      DOCKERHUB_REPOSITORY: 'devatherock/<< pipeline.parameters.repo_name >>'
      SHORT_DESCRIPTION: 'CI plugin to validate yaml files'
      README_FILEPATH: README.md
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - run: |
          sh /entrypoint.sh

  test_docker:
    <<: *yaml_validator_image
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_SEARCH_PATH: "src/test/resources/data/valid"
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - run: sh /scripts/entry-point.sh

  test_docker_duplicate_keys:
    <<: *yaml_validator_image
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_SEARCH_PATH: "src/test/resources/data/duplicate"
      PARAMETER_ALLOW_DUPLICATE_KEYS: true
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - run: sh /scripts/entry-point.sh

  test_docker_debug:
    <<: *yaml_validator_image
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_DEBUG: true
      PARAMETER_SEARCH_PATH: "src/test/resources/data/valid"
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - run: sh /scripts/entry-point.sh

  functional_test:
    parameters:
      command_args:
        type: string
      runner:
        type: executor
    executor: << parameters.runner >>
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - restore_cache:
          keys:
            - v1-integration-{{ checksum "build.gradle" }}
            - v1-integration-
      - run: |
          make functional-test << parameters.command_args >>
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-integration-{{ checksum "build.gradle" }}

  publish_release:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          <<: *workspace
      - run: |
          TAG=${CIRCLE_TAG#v}
          DEV_TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker pull devatherock/drone-yaml-validator:$DEV_TAG
          docker tag devatherock/drone-yaml-validator:$DEV_TAG devatherock/drone-yaml-validator:$TAG
          docker tag devatherock/drone-yaml-validator:$DEV_TAG devatherock/drone-yaml-validator:${TAG}-amd64
          docker pull devatherock/drone-yaml-validator:${DEV_TAG}-arm64
          docker tag devatherock/drone-yaml-validator:${DEV_TAG}-arm64 devatherock/drone-yaml-validator:${TAG}-arm64
          docker push devatherock/drone-yaml-validator:$TAG
          docker push devatherock/drone-yaml-validator:${TAG}-amd64
          docker push devatherock/drone-yaml-validator:${TAG}-arm64

  notify_success:
    <<: *slack_image
    <<: *resource_class
    environment:
      TEXT: "Success: {{.CircleBuildUrl}} by {{.CircleUsername}}"
      COLOR: "#33ad7f"
      CHANNEL: general
      TITLE: "Build completed"
    steps:
      - run: /bin/simpleslack

workflows:
  version: 2.1
  build_publish:
    jobs:
      - build:
          context:
            - docker-credentials
          filters:
            branches:
              only: master
      - groovy_script_to_jar:
          context:
            - docker-credentials
          requires:
            - build
      - java_to_native:
          context:
            - docker-credentials
          requires:
            - groovy_script_to_jar
      - publish_arm:
          context:
            - docker-credentials
          requires:
            - groovy_script_to_jar
      - publish:
          context:
            - docker-credentials
          requires:
            - java_to_native
      - dockerhub_readme:
          context:
            - docker-credentials
            - dockerhub-readme-credentials
          requires:
            - publish_arm
      - test_docker:
          context:
            - docker-credentials
          requires:
            - publish
      - test_docker_duplicate_keys:
          context:
            - docker-credentials
          requires:
            - publish
      - test_docker_debug:
          context:
            - docker-credentials
          requires:
            - publish
      - functional_test:
          name: functional_test_amd
          context:
            - docker-credentials
          runner: machine-executor
          command_args: ''
          requires:
            - publish
      - functional_test:
          name: functional_test_arm
          context:
            - docker-credentials
          runner: arm-executor
          command_args: 'docker_tag=arm64'
          requires:
            - dockerhub_readme
      - notify_success:
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - test_docker
            - test_docker_duplicate_keys
            - test_docker_debug
            - functional_test_amd
            - functional_test_arm

  release:
    jobs:
      - publish_release:
          context:
            - docker-credentials
          <<: *release_filter
      - notify_success:
          context:
            - docker-credentials
            - slack-webhook
          <<: *release_filter
          requires:
            - publish_release

  pr_check:
    jobs:
      - changelog_updater:
          context:
            - docker-credentials
            - changelog-updater-credentials
          <<: *pr_filter
      - test:
          context:
            - docker-credentials
          <<: *pr_filter
          requires:
            - changelog_updater
      - groovy_script_to_jar:
          filters:
            branches:
              ignore: master
          requires:
            - test
