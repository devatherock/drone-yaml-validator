slack_image: &slack_image
  docker:
    - image: devatherock/simple-slack:0.7.0
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
    
yaml_validator_image: &yaml_validator_image
  docker:
    - image: devatherock/drone-yaml-validator:latest
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        
work_directory: &work_directory
  working_directory: ~/drone-yaml-validator

resource_class: &resource_class
  resource_class: small
  
pr_filter: &pr_filter
  filters:
    branches:
      ignore: master

executors:
  jdk-executor:
    docker:
      - image: cimg/openjdk:11.0
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    <<: *resource_class
    <<: *work_directory

version: 2.1
jobs:
  changelog_updater:
    docker:
    - image: devatherock/changelog-updater:0.1.0
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
    <<: *resource_class
    environment:
      VELA_BUILD_AUTHOR: "renovate[bot]"
      VELA_BUILD_AUTHOR_EMAIL: "29139614+renovate[bot]@users.noreply.github.com"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:86:fe:0e:c3:0e:ad:0d:1d:5c:3e:48:cf:28:39:5d"
      - checkout
      - run: sh /scripts/entry-point.sh

  test:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: |
          make test
      - store_artifacts:
          path: build/reports/jacoco
      - store_test_results:
          path: build/test-results
          
  build:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          make coveralls
      - store_artifacts:
          path: build/reports/jacoco
      - store_test_results:
          path: build/test-results

  groovy_script_to_jar:
    docker:
      - image: devatherock/vela-groovy-script-to-jar:0.7.0
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_SCRIPT_PATH: YamlValidator.groovy
      PARAMETER_STATIC_COMPILE: true
      PARAMETER_OUTPUT_FILE: build/native/libs/YamlValidator.jar
    steps:
      - checkout
      - run: sh /scripts/entry-point.sh
      - persist_to_workspace:
          root: ~/drone-yaml-validator
          paths:
            - build
  java_to_native:
    docker:
      - image: devatherock/java-to-native:1.0.0
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: medium
    <<: *work_directory
    environment:
      PLUGIN_JAR_NAME: build/native/libs/YamlValidator.jar
      PLUGIN_CONFIG_FILE: config/graal.yml
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - run: |
          sh /scripts/entry-point.sh
          upx -4 YamlValidator
      - persist_to_workspace:
          root: ~/drone-yaml-validator
          paths:
            - YamlValidator

  publish_dev:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/drone-yaml-validator
      - run: |
          TAG=${CIRCLE_SHA1:0:8}
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker buildx create --name rockbuilder \
            --driver docker-container --use --bootstrap
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t devatherock/drone-yaml-validator:$TAG \
            -t devatherock/drone-yaml-validator:latest .
          
  dockerhub_readme:
    machine:
      image: ubuntu-2204:2023.04.2
    steps:
      - checkout
      - run: |
          docker run -v $PWD:/workspace \
              -e DOCKERHUB_USERNAME \
              -e DOCKERHUB_PASSWORD \
              -e DOCKERHUB_REPOSITORY='devatherock/drone-yaml-validator' \
              -e SHORT_DESCRIPTION='CI plugin to validate yaml files' \
              -e README_FILEPATH='/workspace/README.md' \
              peterevans/dockerhub-description:3.4.1

  test_docker:
    <<: *yaml_validator_image
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_SEARCH_PATH: "src/test/resources/data/valid"
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - run: sh /scripts/entry-point.sh

  test_docker_duplicate_keys:
    <<: *yaml_validator_image
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_SEARCH_PATH: "src/test/resources/data/duplicate"
      PARAMETER_ALLOW_DUPLICATE_KEYS: true
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - run: sh /scripts/entry-point.sh

  test_docker_debug:
    <<: *yaml_validator_image
    <<: *resource_class
    <<: *work_directory
    environment:
      PARAMETER_DEBUG: true
      PARAMETER_SEARCH_PATH: "src/test/resources/data/valid"
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - run: sh /scripts/entry-point.sh
      
  functional_test:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/drone-yaml-validator
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies-
      - run: |
          make functional-test
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      
  publish_release:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/drone-yaml-validator
      - run: |
          TAG=${CIRCLE_TAG#v}
          DEV_TAG=${CIRCLE_SHA1:0:8}
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker buildx create --name rockbuilder \
            --driver docker-container --use --bootstrap
          docker buildx imagetools create \
            -t devatherock/drone-yaml-validator:$TAG devatherock/drone-yaml-validator:$DEV_TAG

  notify_success:
    <<: *slack_image
    <<: *resource_class
    environment:
      TEXT: "Success: {{.CircleBuildUrl}} by {{.CircleUsername}}"
      COLOR: "#33ad7f"
      CHANNEL: general
      TITLE: "Build completed"
    steps:
      - run: /bin/simpleslack

workflows:
  version: 2.1
  build_publish:
    jobs:
      - build:
          context:
            - docker-credentials
          filters:
            branches:
              only: master
      - groovy_script_to_jar:
          context:
            - docker-credentials
          requires:
            - build
      - java_to_native:
          context:
            - docker-credentials
          requires:
            - groovy_script_to_jar
      - publish_dev:
          context:
            - docker-credentials
          requires:
            - java_to_native
      - dockerhub_readme:
          context:
            - docker-credentials
            - dockerhub-readme-credentials
          requires:
            - publish_dev
      - test_docker:
          context:
            - docker-credentials
          requires:
            - publish_dev
      - test_docker_duplicate_keys:
          context:
            - docker-credentials
          requires:
            - publish_dev
      - test_docker_debug:
          context:
            - docker-credentials
          requires:
            - publish_dev
      - functional_test:
          context:
            - docker-credentials
          requires:
            - test_docker
            - test_docker_duplicate_keys
            - test_docker_debug
      - notify_success:
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - functional_test
  release:
    jobs:
      - publish_release:
          context:
            - docker-credentials
          filters:
            branches:
              only: non-existent-branch
            tags:
              only: /^v[0-9\.]+$/
      - notify_success:
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - publish_release
  pr_check:
    jobs:
      - changelog_updater:
          context:
            - docker-credentials
            - changelog-updater-credentials
          <<: *pr_filter
      - test:
          context:
            - docker-credentials
          <<: *pr_filter
          requires:
            - changelog_updater
      - groovy_script_to_jar:
          filters:
            branches:
              ignore: master
          requires:
            - test